version: '3.9'

services:

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
      - minio
    ports:
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: "provectuslabs/kafka-ui:latest"
    depends_on:
      - kafka
    container_name: kafka-ui
    ports:
      - "8090:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    links:
      - kafka

  grafana:
    image: "grafana/grafana-enterprise"
    depends_on:
      - prometheus
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    links:
      - kafka

  prometheus:
    image: "prom/prometheus:latest"
    depends_on:
      - kafka
      - jmx-exporter
    ports:
      - "9090:9090"
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  jmx-exporter:
    image: sscaling/jmx-prometheus-exporter:latest
    container_name: jmx-exporter
    ports:
      - "5556:5556"

  minio:
    image: bitnami/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin


volumes:
  kafka_data:
    driver: local


    #  producer:
    #    container_name: producer
    #    depends_on:
    #      - consumer
    #    build:
    #      context: .
    #      dockerfile: producer/Dockerfile
    #    ports:
    #      - "8080:8080"

    #  consumer:
    #    container_name: consumer
    #    depends_on:
    #      - producer
    #      - kafka
    #    build:
    #      context: .
    #      dockerfile: consumer/Dockerfile