spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: consumer
  kafka:
    # Адреса всех брокеров кластера
    bootstrap-servers:
      - localhost:29092
    listener:
      # Получение каждой записи должно быть подтверждено
      ack-mode: record
    producer:
      client-id: ${spring.application.name}
      # Очередь для исключений
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.dtechs.consumer.kafka.config.DlqMessageSerializer
      retries: 3
      transaction-id-prefix: tx-
    consumer:
      group-id: ${spring.application.name}
      autoOffsetReset: earliest
      # Сериализаторы для всех типов
      keyDeserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      valueDeserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      # Транзакционность консьюмера
      isolation-level: read_committed
    properties:
      spring.json.add.type.info.headers: false
      spring.json.trusted.packages: "*"
      spring.json.value.default.type: io.dtechs.consumer.dto.MessageDto
      spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
      spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
kafka:
  topic:
    photos: photo
    videos: video
    text: text
    overall: overall
    dlq: dlq
  concurrency : 4

storage:
  url: http://127.0.0.1:9000
  user: minioadmin
  password: minioadmin
  region: ru-central1
  bucket:
    photos: photo
    videos: video
    text: text
    photos_overall: photo-overall
    videos_overall: video-overall
    text_overall: text-overall
    dlq: dlq

server:
  port: 8081